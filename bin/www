#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('gym-sass-api:server');
var http = require('http');
const https = require('https');
const fs = require('fs');
var path = require('path');


const options = {
  key: fs.readFileSync(path.join(__dirname + '/../certs/server.key'), 'utf8'),
  ca: fs.readFileSync(path.join(__dirname + '/../certs/intermediate.crt'), 'utf8'),
  cert: fs.readFileSync(path.join(__dirname + '/../certs/server.crt'), 'utf8')
};
app.set('port', port);


var socketController = require('../controllers/socketController');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.HTTP_PORT || '3000');
var https_port = normalizePort(process.env.HTTPS_PORT || '3012');



/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var httpsServer = https.createServer(options, app);



// socket code
var io = require('socket.io')(server, {
  cors: {
    origin: '*',
  }
}); // cors access to all potential connectors

// all socket codes are from this controller
socketController.initializeSocket(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
httpsServer.listen(https_port);



server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.log(error)
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind)
}